Insertion Sort – Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. Simply put, Insertion sort, by default always create an initial sorted part of the array which is most likely the element in the first(1st) position of the array. Therefore, all the other elements in the unsorted part of the array is compared to the element(s) in the sorted portion in order to position the unsorted elements correctly in the sorted portion of the array.

Ref: https://www.w3resource.com/javascript-exercises/searching-and-sorting-algorithm/searching-and-sorting-algorithm-exercise-4.php
https://stackabuse.com/insertion-sort-in-javascript/

Insertion Sort visual implementation  (First Iteration through the loop)

[5, 3, 4, 1, 2] // Yellow is the sorted portion. 3 is next, where should it be inserted in the sorted list
[3, 5, 4, 1, 2] //Yellow is the sorted portion. 4 is next, where should it be inserted in the sorted list
[3, 4, 5, 1, 2] // Yellow is the sorted portion. 1 is next, where should it be inserted in the sorted list
[1, 3, 4, 5, 2] // Yellow is the sorted portion. 2 is next, where should it be inserted in the sorted list
[1, 2, 3, 4, 5] // Now the entire array is completed sorted


Implementation / Solution (Pseudo-code)
a.	Create a functon with an array the parameter

b.	Create a loop that will begin iteration from the 2nd index of the array until the end

c.	Within the loop, create first variable to hold this first element (use 2nd  index ) of the array

d.	Within the loop, create the second variable that will hold the 1st index of the array (j = I – 1)

e.	Within the loop, create a while loop that will iterate as long as the first index if greater than or equal to (0) and the element at the first position of the array is           greater is greater than the element at the second position of the array

f.	If the condition equates to yes, within the while loop, swap the element at the second position with the element at the first position (save arr[j+1] = arr[j]

g.	Immediately after the swap is done, decrease the value of variable that hold the index of the 1st element in the array

h.	Outside of the while loop, add (1) to the variable that holds the first element of the array ( arr[j+1] = key) to move its index to forward by 1 and assign the value of the     second index variable

i.	Outside of all the loops, return the array

j.	Call the function execution


Example (Concrete) – Insertion Sort
function insertionSort(arr){
    for (let i = 1; i < arr.length; ++i) {
        // store the 1st iteration value of this loop into a temp var because arr[0] is considered sorted 
        let key = arr[i];
        // this variable store the index of the first value in the array 
        let j = i - 1; 
//Check whether the first index is greater than 0 and the value of the first index is greater than value in the second index
        while (j >= 0 && arr[j] > key) { 
            // the values are swapped here
            arr[j + 1] = arr[j]; 
            j--; 
        } 
        // Remember you deducted 1 from (j) within the above loop. This pushes it one step backwards
        // Adding (1) to (j) again brings it one step forward, which will be at index zero and continous...
        
arr[j + 1] = key;
    } 
    // Return the array to the function
    return arr;
}

// Execute this function
console.log(insertionSort([100, -1, -100, 20, 10, 13, 11, 67, 54, 88, 73, 99, 89, 100, 80]))
