Bubble Sort – is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order (which means – the first element is larger than the next or following element). The pass through the list is repeated until the list is sorted in ascending order (from smallest element to the largest). Note: At every complete iteration of the loop the current largest number in the array or string is arranged at the top or the end of the array; also, at every iteration of the array or string you have one (1) sorted array thus the array unsorted elements will decrease by one (1). 

Implementation – Less Optimized Solution (Pseudo-code)

a.)	Create a function that accepts an array at its argument

b.)	Within the function create loop that you iterate from the beginning until it’s less than the length of array that was used as the function argument

c.)	Within the first loop, create a second (inner) loop that will iterate from the beginning until it’s less than the length of the same array minus one (array.length – 1)

d.)	Within the second loop, create an If statement that will compare whether the first array-value captured by the first loop (array[j]) is greater than the second array-		value captured by the second loop (array[j] + 1). If yes, then swap the first array-value with second array-value by defining a temp-variable to control the swapping 		process.

e.)	To do the swapping, create the temp variable and set the array[j] element to the variable. Now, set the array[j] to the value of array[j] + 1 and finally set the arr[j] 	+1 element to the value in the temp variable.

f.)	At the beginning of the function, create a variable called noSwaps. Within the first loop (outer loop, set noSwaps variable to TRUE. At the end of the out inner loop but 	within the outer loop, create an if statement that will test if there is no swaps done with the elements in the array so it can stop the loop. Note: At the end of the if 	statement where you are swapping the array-content based on the condition, set noSwaps to false;


Bubble Sort visual implementation  (Iteration through the loop)

First Pass:
( 5 1 4 2 8 ) –> ( 1 5 4 2 8 ), compares the first two elements, and swaps since 5 > 1.
( 1 5 4 2 8 ) –>  ( 1 4 5 2 8 ), Swap since 5 > 4
( 1 4 5 2 8 ) –>  ( 1 4 2 5 8 ), Swap since 5 > 2
( 1 4 2 5 8 ) –> ( 1 4 2 5 8 ), Since (8 > 5), you’ve completed the first iteration.

Second Pass:
( 1 4 2 5 8 ) –> ( 1 4 2 5 8 )
( 1 4 2 5 8 ) –> ( 1 2 4 5 8 ), Swap since 4 > 2
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –>  ( 1 2 4 5 8 )

Now, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.
Third Pass:
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )
( 1 2 4 5 8 ) –> ( 1 2 4 5 8 )

Example (Concrete) – Bubble Sort
Give an array arr = [10, 30, 90, 40, 55, 60, 13, 900, 899, 80, 65], sort this array in ascending order…

// Create a function with one parameter - array
function bubbleSort(arr){
// This variable will be used to check whether there is a swap
let noSwap;
// This loop will be used iterate each time through the array 
for(let i = 0; i < arr.length; i++){
	noSwap = true;
	// This loop will be used to iterate through the array according to the length -1 times
	// When inner loop reaches end, it will move the iteration to the next part of the outer loop
	for(let j = 0; j < arr.length - 1; j++){
	// This condition will check if the first value in the array is greater than its adjacent value
	if(arr[j] > arr[j+1]){
	//swap arr[j+1] and arr[j]
	let temp = arr[j];
	arr[j] = arr[j+1];
	arr[j+1] = temp;
	// sets noSwap to because there was a swap
	noSwap = false;
	}
}
	// When the array is sorted and there is no swaps to be done, this code will run
	if(noSwap) break;
}
	// Returns the arr
	return arr;
}
// This code will execute the function
console.log(bubbleSort([10, 30, 90, 40, 55, 60, 13, 900, 899, 80, 65]))
