Selection Sort – Similar to bubble sort, but instead of first placing large values into sorted position, it places small values into sorted position. Simply put, Selection sort is used to iterate through an from left to right comparing each value with its adjacent value to find the single smallest value at each iteration. At the end of the iteration the smallest value will be placed at the beginning of the array.

Ref: https://humanwhocodes.com/blog/2009/09/08/computer-science-in-javascript-selection-sort/ 

Selection Sort visual implementation  (First Iteration through the loop)

[5, 3, 4, 1, 2] // compare the first two elements, 5 and 3. 3 is the smallest element. => One step
[5, 3, 4, 1, 2] // compare 3 & 4, 3 is still the smallest element but 5 remains the starting element.
[5, 3, 4, 1, 2] // Compare 3 and 1, 1 is now the smallest but 5 remains the starting element
[5, 3, 4, 1, 2] // Compare 1 and 2, 1 is still the smallest but 5 remain the starting element
[1, 3, 4, 5, 2] // Swap 1 at the beginning of the loop as the 1st element and place 5 in the 1 position.

Note: To continue with the iteration, move to the next element which is 3 and compare it 4 which is the following element and so on… following the above pattern.


Implementation / Solution (Pseudo-code)
a.	Define a function with an array as its parameter

b.	Within the function, create a loop that will iterate from the beginning to the end of the array that was inputed into the function

c.	Within the for loop, create a variable that will host the lowest index of the array

d.	Within the outer or first loop, create the second loop that will iterate from the second index or position  to the end of the array

e.	Within the inner (second) loop, create an If statement that will be used check whether the value at the second position of the array is less than value at the first position of the array. Eg: if(arr[j] < arr[i]). If the test is true, set the variable with the lowest index (mostly the initial variable of the first loop) to initial (starting index) variable of the variable of the second loop. Eg. if(arr[j] < arr[i]){lowest = j} // set a new lowest.

f.	Outside of the inner loop but still inside of the outer loop, create an if statement that will test whether i (value you begin with ) is not equal (!==) to the lowest, then within this function create a temp variable that will hold the first element of the array => arr[i] and save the lowest value in arr[i] => the first value of the array. And also, set the value in the temp variable to the variable - arr[lowest].

Example (Concrete) – Selection Sort
Give an array arr = [10, 30, 90, 40, 55, 60, 13, 900, 899, 80, 65], sort this array in ascending order…

// Create a function with one parameter - array
function selectionSort(arr){
    for(let i = 0; i < arr.length; i++){
        // Get the minimum value
        let minIndex = i;
        // Find the minimum element in the unsorted array
        for(let j = i+1; j < arr.length; j++){
            if(arr[j] < arr[minIndex]){
                minIndex = j;

                // Swap the found minimum element with the first element 
                let temp = arr[minIndex];
                arr[minIndex] = arr[i];
                arr[i] = temp;
            }
        }
    }
    // Return the entire arr
    return arr;
}
// Execute the function 
console.log(selectionSort([10, 30, 90, 40, 55, 1000, 700, 60, 13, 900, 899, 80, 65]))
